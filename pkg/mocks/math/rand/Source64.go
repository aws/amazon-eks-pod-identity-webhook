// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Source64 is an autogenerated mock type for the Source64 type
type Source64 struct {
	mock.Mock
}

type Source64_Expecter struct {
	mock *mock.Mock
}

func (_m *Source64) EXPECT() *Source64_Expecter {
	return &Source64_Expecter{mock: &_m.Mock}
}

// Int63 provides a mock function with no fields
func (_m *Source64) Int63() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Int63")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Source64_Int63_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Int63'
type Source64_Int63_Call struct {
	*mock.Call
}

// Int63 is a helper method to define mock.On call
func (_e *Source64_Expecter) Int63() *Source64_Int63_Call {
	return &Source64_Int63_Call{Call: _e.mock.On("Int63")}
}

func (_c *Source64_Int63_Call) Run(run func()) *Source64_Int63_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Source64_Int63_Call) Return(_a0 int64) *Source64_Int63_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Source64_Int63_Call) RunAndReturn(run func() int64) *Source64_Int63_Call {
	_c.Call.Return(run)
	return _c
}

// Seed provides a mock function with given fields: seed
func (_m *Source64) Seed(seed int64) {
	_m.Called(seed)
}

// Source64_Seed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Seed'
type Source64_Seed_Call struct {
	*mock.Call
}

// Seed is a helper method to define mock.On call
//   - seed int64
func (_e *Source64_Expecter) Seed(seed interface{}) *Source64_Seed_Call {
	return &Source64_Seed_Call{Call: _e.mock.On("Seed", seed)}
}

func (_c *Source64_Seed_Call) Run(run func(seed int64)) *Source64_Seed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *Source64_Seed_Call) Return() *Source64_Seed_Call {
	_c.Call.Return()
	return _c
}

func (_c *Source64_Seed_Call) RunAndReturn(run func(int64)) *Source64_Seed_Call {
	_c.Run(run)
	return _c
}

// Uint64 provides a mock function with no fields
func (_m *Source64) Uint64() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Uint64")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Source64_Uint64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Uint64'
type Source64_Uint64_Call struct {
	*mock.Call
}

// Uint64 is a helper method to define mock.On call
func (_e *Source64_Expecter) Uint64() *Source64_Uint64_Call {
	return &Source64_Uint64_Call{Call: _e.mock.On("Uint64")}
}

func (_c *Source64_Uint64_Call) Run(run func()) *Source64_Uint64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Source64_Uint64_Call) Return(_a0 uint64) *Source64_Uint64_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Source64_Uint64_Call) RunAndReturn(run func() uint64) *Source64_Uint64_Call {
	_c.Call.Return(run)
	return _c
}

// NewSource64 creates a new instance of Source64. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSource64(t interface {
	mock.TestingT
	Cleanup(func())
}) *Source64 {
	mock := &Source64{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
